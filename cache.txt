
///////////////////////////////////////////////////////////////////////////////
//
// CS 1541 Introduction to Computer Architecture
// Use this skeleton code to create a cache instance and implement cache operations.
// Feel free to add new variables in the structure if needed.
//
///////////////////////////////////////////////////////////////////////////////

#include <stdlib.h>
#include <stdio.h>
#include "trace_item.h"
#include "skeleton.h"

#define TRACE_BUFSIZE 1024*1024
#define KILO 1024  // 2^10

static FILE *trace_fd;
static int trace_buf_ptr;
static int trace_buf_end;
static struct trace_item *trace_buf;

static struct cache_t *Cache;

// to keep statistics
unsigned int accesses = 0;
unsigned int read_accesses = 0;
unsigned int write_accesses = 0;
unsigned int hits = 0;
unsigned int misses = 0;
unsigned int misses_with_writeback = 0;

unsigned long long sim_time = 0; // simulated clock cycle time

void trace_init()
{
  trace_buf = malloc(sizeof(struct trace_item) * TRACE_BUFSIZE);

  if (!trace_buf) {
    fprintf(stdout, "** trace_buf not allocated\n");
    exit(-1);
  }

  trace_buf_ptr = 0;
  trace_buf_end = 0;
}

void trace_uninit()
{
  free(trace_buf);
  fclose(trace_fd);
}

int trace_get_item(struct trace_item **item)
{
  int n_items;

  if (trace_buf_ptr == trace_buf_end) {
    // get new data
    n_items = fread(trace_buf, sizeof(struct trace_item), TRACE_BUFSIZE, trace_fd);
    if (!n_items) return 0;

    trace_buf_ptr = 0;
    trace_buf_end = n_items;
  }

  *item = &trace_buf[trace_buf_ptr];
  trace_buf_ptr++;

  return 1;
}

int powerof2(unsigned int bytes){
	while (((bytes % 2) == 0) && bytes > 1) /* While x is even and > 1 */
	bytes /= 2;
	return (bytes == 1);
}

int main(int argc, char **argv)
{
  struct trace_item *tr_entry;
  size_t size;
  char *trace_file_name;
  int trace_view_on ;
  int result;
  
	int cache_size = 1;         // cache size (in bytes), use KILO defined on top of the file
	int cache_block_size = 16;   // cache block size (in bytes)
	int assoc = 1;              // cache associativity
	int repl_policy = LRU;      // cache replacement policy

  if (argc == 1) {
    fprintf(stdout, "\nUSAGE: tv <trace_file> <switch - any character>\n");
    fprintf(stdout, "\n(switch) to turn on or off individual item view.\n\n");
    exit(0);
  }
  
  if(argc != 5){
	fprintf(stdout, "\nUSAGE: tv <trace_file> <switch - any character>\n");
    fprintf(stdout, "\n(switch) to turn on or off individual item view.\n\n");
    exit(0);
  }
  
  trace_file_name = argv[1];
  trace_view_on = atoi(argv[2]);
  cache_size = atoi(argv[3]);
  if(!powerof2(cache_size)){
	fprintf(stdout, "\ncache size must be power of 2\n");
	exit(0);
  }
  assoc = atoi(argv[4]);
  if(!powerof2(assoc)){
	fprintf(stdout, "\nassociativity must be power of 2\n");
	exit(0);
  }
  // here you should extract the cache parameters from the command line

  fprintf(stdout, "\n ** opening file %s\n", trace_file_name);

  trace_fd = fopen(trace_file_name, "rb");

  if (!trace_fd) {
    fprintf(stdout, "\ntrace file %s not opened.\n\n", trace_file_name);
    exit(0);
  }

  trace_init();
  Cache = cache_create(cache_size, cache_block_size, assoc, repl_policy);

  while(1) {
    size = trace_get_item(&tr_entry);
   
    if (!size) {       /* no more instructions to simulate */
	    printf("+ number of accesses : %d \n", accesses);
      printf("+ number of reads : %d \n", read_accesses);
      printf("+ number of writes : %d \n", write_accesses);
	  printf("+ number of hits : %d \n", hits);
	  printf("+ number of misses: %d \n", misses);
	  printf("+ number of misses with writebacks %d\n", misses_with_writeback);
	    break;
    }
    else{              /* process only loads and stores */;
	    if (tr_entry->type == ti_LOAD) {
			  if (trace_view_on) printf("LOAD %x \n",tr_entry->Addr) ;
			  accesses ++;
			  read_accesses++ ;
			  // call cache_access(struct cache_t *cp, tr_entry->Addr, access_type, sim_time)
			  result = cache_access(Cache, tr_entry->Addr, 0, sim_time);
			  if(result == 0){
				hits++;
			  }
			  if(result == 1){
				misses++;
			  }
			  if(result == 2){
				misses_with_writeback++;
			 }
	    }
	    if (tr_entry->type == ti_STORE) {
    	  if (trace_view_on) printf("STORE %x \n",tr_entry->Addr) ;
			  accesses ++;
			  write_accesses++ ;
			  // call cache_access(struct cache_t *cp, tr_entry->Addr, access_type, sim_time)
			  result = cache_access(Cache, tr_entry->Addr, 1, sim_time);
			  if(result == 0){
				hits++;
			  }
			  if(result == 1){
				misses++;
			  }
			  if(result == 2){
				misses_with_writeback++;
			 }
	    }
	    // based on the value returned, update the statisctics for hits, misses and misses_with_writeback
		
		sim_time++;
    }  
  }

  trace_uninit();
	free(Cache);
  exit(0);
}


